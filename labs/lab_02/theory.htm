<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>
<a name="top"></a>
<h1><b>2. Розгалужені обчислювальні процеси</b>
</h1>
<em>Мета  роботи:</em>
<ol>
  <li>
    Вивчити особливості розгалужених обчислювальних процесів
  </li>
  <li>
    Опанувати технологію використання логічних операторів
  </li>
</ol>
<h2>2.1. Теоретичні відомості</h2>
<p>Алгоритмічна конструкція, що дозволяє виконавцеві алгоритму вибрати ту чи іншу послідовність дій залежно від певних умов, називається <em>розгалуженням або конструкцією вибору альтернатив.</em></p>
<h3><span style="color: #00C">2.1.1. Вибір із двох альтернатив</span><br>
</h3>
<p>Алгоритмічна конструкція  альтернативного розгалуження, або конструкція вибору з двох альтернатив,  дозволяє виконавцеві алгоритму вибрати один із двох варіантів дій залежно від  істинності деякої умови. У мовах С/C++ альтернативні розгалуження реалізуються умовним оператором (<em>оператором  розгалуження</em>) і <em>умовним&nbsp; виразом</em>. Синтаксис умовного оператора є таким:<br>
  <span class="light">if</span> (&lt; умова &gt;)&lt;оператор1;&gt; [<span class="light">else</span> &lt;оператор2;&gt;]<br>
Тут <span class="light"><span class="comments"><span class="light">if</span></span></span>,&nbsp; <span class="light"><span class="name"><span class="light">else</span></span></span> &mdash; зарезервовані слова, &lt;умова&gt; &mdash; довільний логічний вираз; &lt;оператор1;&gt; і &lt;оператор2;&gt; &mdash; довільні оператори. <br>
Виконання умовного оператора  починається з обчислення значення булевого виразу &lt;умова&gt;. Якщо цей вираз є істинним, то виконується  &lt;оператор1&gt; і керування  передається наступному за умовним оператору (&lt;оператор2&gt; пропускається). Якщо вираз &lt;умова&gt; є хибним, то &lt;оператор1&gt; пропускається, а виконується лише &lt;оператор2&gt; і на цьому дія умовного оператора вважається  завершеною.<br>
Операція &laquo;?:&raquo; дозволяє записати умовний вираз аналогічний  умовному оператору:<br>
&lt; вираз1 &gt;&nbsp;? &lt;  вираз2 &gt;&nbsp;:&lt; вираз3 &gt;;<br>
Якщо &lt; вираз1  &gt;&nbsp; приймає істинне значення, то обчислюється &lt; вираз2  &gt;, &nbsp;інакше &ndash; &lt;вираз3  &gt;.<br>
Наприклад, умовний вираз  для визначення абсолютного значення числа <em>х</em> можна записати так: x&nbsp;&gt;&nbsp;0&nbsp;?&nbsp;abs=&nbsp;x&nbsp;:&nbsp;abs&nbsp;=&nbsp;-x; <br>
  <br>
</p>
<h3 style="color: #00C">2.1.2. Вкладеність конструкцій вибору</h3>
<p>Гілки деякого  розгалуження можуть містити інші розгалуження. Синтаксис відповідного фрагменту  C-програми такий:<br>
  <span class="light">іf</span> (&lt;умова1&gt;)  &lt;оператор1;&gt;<br>
  <span class="light">else if</span> (&lt;умова2&gt;) &lt;оператор2;&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp; <span class="light">else</span> &lt;оператор3;&gt;<br>
Піраміди вкладених  розгалужень завжди можуть бути реалізовані послідовними операторами розгалуження  за рахунок ускладнення умов:<br>
<span class="light">іf</span> (&lt;умова1&gt;) &lt;оператор1;&gt;<br>
<span class="light">if</span> (!(&lt;умова1&gt;) &amp;&amp; &lt;умова2&gt;) &lt;оператор2;&gt; <br>
<span class="light">if</span> (!(&lt;умова1&gt;) &amp;&amp; !(&lt;умова2&gt;)) &lt;оператор3;&gt;<br>
Але слід зазначити, що <em>вкладені умовні оператори</em>&nbsp;працюють  значно швидше, ніж серія умовних операторів у скороченій формі.<br>
<br>
</p>
<h3 style="color: #00C">2.1.3. Операторний блок</h3>
<p><em>Операторний блок</em>, або складений оператор, &mdash; це послідовність  операторів, що оточені фігурними дужками { }. Синтаксис операторного блоку має  такий вигляд:</p>
{&nbsp;&nbsp; &lt;оператор1;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; &lt;оператор2;&gt;<br>
}
<p><br>
  
</p>
<h3><span style="color: #00C">2.1.4. Поліваріантний вибір </span><br>
</h3>
<p>У мовах С/С++  алгоритмічну конструкцію поліваріантного виразу реалізовано <em>оператором перемикання</em>.&nbsp;Наведемо  його синтаксис:<br>
  <span class="light">switch</span> ( &lt; селектор &gt; )<br>
{&nbsp; <span class="light">case</span> &lt;список констант1&gt;: &lt;оператор1;&gt;&nbsp; <span class="light">break</span>;<br>
&nbsp;&nbsp; <span class="light">case</span> &lt;список констант2&gt;:  &lt;оператор2;&gt;&nbsp; <span class="light">break</span>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;....................................<br>
&nbsp;&nbsp; <span class="light">default</span>:&nbsp; &lt;операторN;&gt;&nbsp; <span class="light">break</span>;<br>
&nbsp;}<br>
Тут <span class="light">switch</span>, <span class="light">case</span>, <span class="light">default</span>, <span class="light">break</span> &mdash; це зарезервовані слова, &lt;селектор&gt; &mdash; змінна або вираз, який має довільний перелічуваний  тип; &lt;список констант&gt; &mdash;  перелік розділених комами значень того самого типу, що і селектор; &lt;оператор&gt; &mdash; будь-який оператор; дужки &laquo;{&raquo;&nbsp; та &laquo;}&raquo; означують початок та кінць тіла  оператора <span class="light">switch</span>. </p>
Оператор  перемикання виконується за таким алгоритмом. Спочатку обчислюється значення  виразу-селектора. Потім вибирається той список констант, до якого належить  отримане значення, виконується відповідний оператор і на цьому дія оператора <span class="light">switch</span> завершується. Якщо поточне значення селектора не збігається з жодною з констант  перемикання, то виконується гілка <span class="light">default</span>, а якщо її немає, то виконання оператора перемикання  завершується завдяки наявності оператора переривання <span class="light">break</span> у кожній  гілці <span class="light">case</span>.
<p><a href="#top">Вверх</a></p>
</body>
</html>